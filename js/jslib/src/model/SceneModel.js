/**
 * PreForm API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ModelProperties from './ModelProperties';
import SceneMaterialsModel from './SceneMaterialsModel';
import SceneTypeModel from './SceneTypeModel';

/**
 * The SceneModel model module.
 * @module model/SceneModel
 * @version 1.0
 */
class SceneModel {
    /**
     * Constructs a new <code>SceneModel</code>.
     * @alias module:model/SceneModel
     */
    constructor() { 
        
        SceneModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SceneModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SceneModel} obj Optional instance to populate.
     * @return {module:model/SceneModel} The populated <code>SceneModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SceneModel();

            if (data.hasOwnProperty('models')) {
                obj['models'] = ApiClient.convertToType(data['models'], [ModelProperties]);
            }
            if (data.hasOwnProperty('scene_type')) {
                obj['scene_type'] = SceneTypeModel.constructFromObject(data['scene_type']);
            }
            if (data.hasOwnProperty('materials')) {
                obj['materials'] = SceneMaterialsModel.constructFromObject(data['materials']);
            }
            if (data.hasOwnProperty('layers')) {
                obj['layers'] = ApiClient.convertToType(data['layers'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SceneModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SceneModel</code>.
     */
    static validateJSON(data) {
        if (data['models']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['models'])) {
                throw new Error("Expected the field `models` to be an array in the JSON data but got " + data['models']);
            }
            // validate the optional field `models` (array)
            for (const item of data['models']) {
                ModelProperties.validateJSON(item);
            };
        }
        // validate the optional field `scene_type`
        if (data['scene_type']) { // data not null
          SceneTypeModel.validateJSON(data['scene_type']);
        }
        // validate the optional field `materials`
        if (data['materials']) { // data not null
          SceneMaterialsModel.validateJSON(data['materials']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/ModelProperties>} models
 */
SceneModel.prototype['models'] = undefined;

/**
 * @member {module:model/SceneTypeModel} scene_type
 */
SceneModel.prototype['scene_type'] = undefined;

/**
 * @member {module:model/SceneMaterialsModel} materials
 */
SceneModel.prototype['materials'] = undefined;

/**
 * The number of layers in the scene
 * @member {Number} layers
 */
SceneModel.prototype['layers'] = undefined;






export default SceneModel;

