/**
 * PreForm API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ModelsSelectionModel from './ModelsSelectionModel';

/**
 * The SceneAutoSupportPostRequest model module.
 * @module model/SceneAutoSupportPostRequest
 * @version 1.0
 */
class SceneAutoSupportPostRequest {
    /**
     * Constructs a new <code>SceneAutoSupportPostRequest</code>.
     * @alias module:model/SceneAutoSupportPostRequest
     * @param models {module:model/ModelsSelectionModel} 
     */
    constructor(models) { 
        
        SceneAutoSupportPostRequest.initialize(this, models);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, models) { 
        obj['models'] = models;
    }

    /**
     * Constructs a <code>SceneAutoSupportPostRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SceneAutoSupportPostRequest} obj Optional instance to populate.
     * @return {module:model/SceneAutoSupportPostRequest} The populated <code>SceneAutoSupportPostRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SceneAutoSupportPostRequest();

            if (data.hasOwnProperty('models')) {
                obj['models'] = ModelsSelectionModel.constructFromObject(data['models']);
            }
            if (data.hasOwnProperty('raft_type')) {
                obj['raft_type'] = ApiClient.convertToType(data['raft_type'], 'String');
            }
            if (data.hasOwnProperty('raft_label_enabled')) {
                obj['raft_label_enabled'] = ApiClient.convertToType(data['raft_label_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('breakaway_structure_enabled')) {
                obj['breakaway_structure_enabled'] = ApiClient.convertToType(data['breakaway_structure_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('density')) {
                obj['density'] = ApiClient.convertToType(data['density'], 'Number');
            }
            if (data.hasOwnProperty('touchpoint_size_mm')) {
                obj['touchpoint_size_mm'] = ApiClient.convertToType(data['touchpoint_size_mm'], 'Number');
            }
            if (data.hasOwnProperty('internal_supports_enabled')) {
                obj['internal_supports_enabled'] = ApiClient.convertToType(data['internal_supports_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('raft_thickness_mm')) {
                obj['raft_thickness_mm'] = ApiClient.convertToType(data['raft_thickness_mm'], 'Number');
            }
            if (data.hasOwnProperty('slope_multiplier')) {
                obj['slope_multiplier'] = ApiClient.convertToType(data['slope_multiplier'], 'Number');
            }
            if (data.hasOwnProperty('height_above_raft_mm')) {
                obj['height_above_raft_mm'] = ApiClient.convertToType(data['height_above_raft_mm'], 'Number');
            }
            if (data.hasOwnProperty('z_compression_correction_mm')) {
                obj['z_compression_correction_mm'] = ApiClient.convertToType(data['z_compression_correction_mm'], 'Number');
            }
            if (data.hasOwnProperty('early_layer_merge_mm')) {
                obj['early_layer_merge_mm'] = ApiClient.convertToType(data['early_layer_merge_mm'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SceneAutoSupportPostRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SceneAutoSupportPostRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SceneAutoSupportPostRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `models`
        if (data['models']) { // data not null
          ModelsSelectionModel.validateJSON(data['models']);
        }
        // ensure the json data is a string
        if (data['raft_type'] && !(typeof data['raft_type'] === 'string' || data['raft_type'] instanceof String)) {
            throw new Error("Expected the field `raft_type` to be a primitive type in the JSON string but got " + data['raft_type']);
        }

        return true;
    }


}

SceneAutoSupportPostRequest.RequiredProperties = ["models"];

/**
 * @member {module:model/ModelsSelectionModel} models
 */
SceneAutoSupportPostRequest.prototype['models'] = undefined;

/**
 * The type of raft to apply to the models
 * @member {module:model/SceneAutoSupportPostRequest.RaftTypeEnum} raft_type
 */
SceneAutoSupportPostRequest.prototype['raft_type'] = undefined;

/**
 * Whether to enable raft labeling
 * @member {Boolean} raft_label_enabled
 */
SceneAutoSupportPostRequest.prototype['raft_label_enabled'] = undefined;

/**
 * Whether to enable breakaway structure
 * @member {Boolean} breakaway_structure_enabled
 */
SceneAutoSupportPostRequest.prototype['breakaway_structure_enabled'] = undefined;

/**
 * The density of the supports
 * @member {Number} density
 */
SceneAutoSupportPostRequest.prototype['density'] = undefined;

/**
 * The size of the touchpoints
 * @member {Number} touchpoint_size_mm
 */
SceneAutoSupportPostRequest.prototype['touchpoint_size_mm'] = undefined;

/**
 * Whether to enable internal supports
 * @member {Boolean} internal_supports_enabled
 */
SceneAutoSupportPostRequest.prototype['internal_supports_enabled'] = undefined;

/**
 * The thickness of the raft
 * @member {Number} raft_thickness_mm
 */
SceneAutoSupportPostRequest.prototype['raft_thickness_mm'] = undefined;

/**
 * The slope multiplier
 * @member {Number} slope_multiplier
 */
SceneAutoSupportPostRequest.prototype['slope_multiplier'] = undefined;

/**
 * @member {Number} height_above_raft_mm
 */
SceneAutoSupportPostRequest.prototype['height_above_raft_mm'] = undefined;

/**
 * @member {Number} z_compression_correction_mm
 */
SceneAutoSupportPostRequest.prototype['z_compression_correction_mm'] = undefined;

/**
 * @member {Number} early_layer_merge_mm
 */
SceneAutoSupportPostRequest.prototype['early_layer_merge_mm'] = undefined;





/**
 * Allowed values for the <code>raft_type</code> property.
 * @enum {String}
 * @readonly
 */
SceneAutoSupportPostRequest['RaftTypeEnum'] = {

    /**
     * value: "FULL_RAFT"
     * @const
     */
    "FULL_RAFT": "FULL_RAFT",

    /**
     * value: "MINI_RAFTS"
     * @const
     */
    "MINI_RAFTS": "MINI_RAFTS",

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE"
};



export default SceneAutoSupportPostRequest;

