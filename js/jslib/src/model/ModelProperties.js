/**
 * PreForm API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EulerAnglesModel from './EulerAnglesModel';
import ModelPropertiesBbox from './ModelPropertiesBbox';
import ScenePositionModel from './ScenePositionModel';
import UnitsModel from './UnitsModel';

/**
 * The ModelProperties model module.
 * @module model/ModelProperties
 * @version 1.0
 */
class ModelProperties {
    /**
     * Constructs a new <code>ModelProperties</code>.
     * @alias module:model/ModelProperties
     */
    constructor() { 
        
        ModelProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ModelProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ModelProperties} obj Optional instance to populate.
     * @return {module:model/ModelProperties} The populated <code>ModelProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ModelProperties();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = ScenePositionModel.constructFromObject(data['position']);
            }
            if (data.hasOwnProperty('orientation')) {
                obj['orientation'] = EulerAnglesModel.constructFromObject(data['orientation']);
            }
            if (data.hasOwnProperty('scale')) {
                obj['scale'] = ApiClient.convertToType(data['scale'], 'Number');
            }
            if (data.hasOwnProperty('units')) {
                obj['units'] = UnitsModel.constructFromObject(data['units']);
            }
            if (data.hasOwnProperty('bbox')) {
                obj['bbox'] = ModelPropertiesBbox.constructFromObject(data['bbox']);
            }
            if (data.hasOwnProperty('original_file')) {
                obj['original_file'] = ApiClient.convertToType(data['original_file'], 'String');
            }
            if (data.hasOwnProperty('visible')) {
                obj['visible'] = ApiClient.convertToType(data['visible'], 'Boolean');
            }
            if (data.hasOwnProperty('has_supports')) {
                obj['has_supports'] = ApiClient.convertToType(data['has_supports'], 'Boolean');
            }
            if (data.hasOwnProperty('in_bounds')) {
                obj['in_bounds'] = ApiClient.convertToType(data['in_bounds'], 'Boolean');
            }
            if (data.hasOwnProperty('raw_mesh_hash')) {
                obj['raw_mesh_hash'] = ApiClient.convertToType(data['raw_mesh_hash'], 'String');
            }
            if (data.hasOwnProperty('canonical_model_hash')) {
                obj['canonical_model_hash'] = ApiClient.convertToType(data['canonical_model_hash'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ModelProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ModelProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `position`
        if (data['position']) { // data not null
          ScenePositionModel.validateJSON(data['position']);
        }
        // validate the optional field `orientation`
        if (data['orientation']) { // data not null
          EulerAnglesModel.validateJSON(data['orientation']);
        }
        // validate the optional field `bbox`
        if (data['bbox']) { // data not null
          ModelPropertiesBbox.validateJSON(data['bbox']);
        }
        // ensure the json data is a string
        if (data['original_file'] && !(typeof data['original_file'] === 'string' || data['original_file'] instanceof String)) {
            throw new Error("Expected the field `original_file` to be a primitive type in the JSON string but got " + data['original_file']);
        }
        // ensure the json data is a string
        if (data['raw_mesh_hash'] && !(typeof data['raw_mesh_hash'] === 'string' || data['raw_mesh_hash'] instanceof String)) {
            throw new Error("Expected the field `raw_mesh_hash` to be a primitive type in the JSON string but got " + data['raw_mesh_hash']);
        }
        // ensure the json data is a string
        if (data['canonical_model_hash'] && !(typeof data['canonical_model_hash'] === 'string' || data['canonical_model_hash'] instanceof String)) {
            throw new Error("Expected the field `canonical_model_hash` to be a primitive type in the JSON string but got " + data['canonical_model_hash']);
        }

        return true;
    }


}



/**
 * The unique identifier of the model
 * @member {String} id
 */
ModelProperties.prototype['id'] = undefined;

/**
 * The name of the model used within job preparation.
 * @member {String} name
 */
ModelProperties.prototype['name'] = undefined;

/**
 * @member {module:model/ScenePositionModel} position
 */
ModelProperties.prototype['position'] = undefined;

/**
 * @member {module:model/EulerAnglesModel} orientation
 */
ModelProperties.prototype['orientation'] = undefined;

/**
 * The scale factor to apply to the model
 * @member {Number} scale
 */
ModelProperties.prototype['scale'] = undefined;

/**
 * @member {module:model/UnitsModel} units
 */
ModelProperties.prototype['units'] = undefined;

/**
 * @member {module:model/ModelPropertiesBbox} bbox
 */
ModelProperties.prototype['bbox'] = undefined;

/**
 * The original file path of the model
 * @member {String} original_file
 */
ModelProperties.prototype['original_file'] = undefined;

/**
 * Whether the model is visible in the scene
 * @member {Boolean} visible
 */
ModelProperties.prototype['visible'] = undefined;

/**
 * Whether the model has supports
 * @member {Boolean} has_supports
 */
ModelProperties.prototype['has_supports'] = undefined;

/**
 * Whether the model is within the build volume
 * @member {Boolean} in_bounds
 */
ModelProperties.prototype['in_bounds'] = undefined;

/**
 * The hash of the raw mesh data
 * @member {String} raw_mesh_hash
 */
ModelProperties.prototype['raw_mesh_hash'] = undefined;

/**
 * The hash of the canonical model data
 * @member {String} canonical_model_hash
 */
ModelProperties.prototype['canonical_model_hash'] = undefined;






export default ModelProperties;

