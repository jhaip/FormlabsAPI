/**
 * PreForm API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ModelsSelectionModel from './ModelsSelectionModel';

/**
 * The DentalMode model module.
 * @module model/DentalMode
 * @version 1.0
 */
class DentalMode {
    /**
     * Constructs a new <code>DentalMode</code>.
     * @alias module:model/DentalMode
     * @param models {module:model/ModelsSelectionModel} 
     * @param mode {module:model/DentalMode.ModeEnum} 
     */
    constructor(models, mode) { 
        
        DentalMode.initialize(this, models, mode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, models, mode) { 
        obj['models'] = models;
        obj['mode'] = mode;
    }

    /**
     * Constructs a <code>DentalMode</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DentalMode} obj Optional instance to populate.
     * @return {module:model/DentalMode} The populated <code>DentalMode</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DentalMode();

            if (data.hasOwnProperty('models')) {
                obj['models'] = ModelsSelectionModel.constructFromObject(data['models']);
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
            if (data.hasOwnProperty('tilt')) {
                obj['tilt'] = ApiClient.convertToType(data['tilt'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DentalMode</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DentalMode</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DentalMode.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `models`
        if (data['models']) { // data not null
          ModelsSelectionModel.validateJSON(data['models']);
        }
        // ensure the json data is a string
        if (data['mode'] && !(typeof data['mode'] === 'string' || data['mode'] instanceof String)) {
            throw new Error("Expected the field `mode` to be a primitive type in the JSON string but got " + data['mode']);
        }

        return true;
    }


}

DentalMode.RequiredProperties = ["models", "mode"];

/**
 * @member {module:model/ModelsSelectionModel} models
 */
DentalMode.prototype['models'] = undefined;

/**
 * @member {module:model/DentalMode.ModeEnum} mode
 */
DentalMode.prototype['mode'] = undefined;

/**
 * Degrees of tilt. Only applies to the DENTAL mode
 * @member {Number} tilt
 */
DentalMode.prototype['tilt'] = undefined;





/**
 * Allowed values for the <code>mode</code> property.
 * @enum {String}
 * @readonly
 */
DentalMode['ModeEnum'] = {

    /**
     * value: "DENTAL"
     * @const
     */
    "DENTAL": "DENTAL"
};



export default DentalMode;

