/**
 * PreForm API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AutoLayoutPost500Response from '../model/AutoLayoutPost500Response';
import AutoOrientPostRequest from '../model/AutoOrientPostRequest';
import ErrorModel from '../model/ErrorModel';
import ExportPost200Response from '../model/ExportPost200Response';
import LoadFormPostRequest from '../model/LoadFormPostRequest';
import SceneAutoPackPostRequest from '../model/SceneAutoPackPostRequest';
import SceneImportModelPost200Response from '../model/SceneImportModelPost200Response';
import SceneImportModelPostRequest from '../model/SceneImportModelPostRequest';
import SceneModelsIdReplacePost200Response from '../model/SceneModelsIdReplacePost200Response';
import SceneModelsIdReplacePostRequest from '../model/SceneModelsIdReplacePostRequest';
import ScenePostRequest from '../model/ScenePostRequest';
import SceneSaveScreenshotPostRequest from '../model/SceneSaveScreenshotPostRequest';
import V1PrintPost200Response from '../model/V1PrintPost200Response';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the autoLayoutPost operation.
     * @callback module:api/DefaultApi~autoLayoutPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run auto layout operation
     * @param {module:model/AutoOrientPostRequest} autoOrientPostRequest Models to run the auto layout operation on
     * @param {module:api/DefaultApi~autoLayoutPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    autoLayoutPost(autoOrientPostRequest, callback) {
      let postBody = autoOrientPostRequest;
      // verify the required parameter 'autoOrientPostRequest' is set
      if (autoOrientPostRequest === undefined || autoOrientPostRequest === null) {
        throw new Error("Missing the required parameter 'autoOrientPostRequest' when calling autoLayoutPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/auto-layout/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the autoOrientPost operation.
     * @callback module:api/DefaultApi~autoOrientPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run auto orient operation
     * @param {module:model/AutoOrientPostRequest} autoOrientPostRequest Models to run the auto orient operation on
     * @param {module:api/DefaultApi~autoOrientPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    autoOrientPost(autoOrientPostRequest, callback) {
      let postBody = autoOrientPostRequest;
      // verify the required parameter 'autoOrientPostRequest' is set
      if (autoOrientPostRequest === undefined || autoOrientPostRequest === null) {
        throw new Error("Missing the required parameter 'autoOrientPostRequest' when calling autoOrientPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/auto-orient/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the autoSupportPost operation.
     * @callback module:api/DefaultApi~autoSupportPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run auto support operation
     * @param {module:model/AutoOrientPostRequest} autoOrientPostRequest Models to run the auto support operation on
     * @param {module:api/DefaultApi~autoSupportPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    autoSupportPost(autoOrientPostRequest, callback) {
      let postBody = autoOrientPostRequest;
      // verify the required parameter 'autoOrientPostRequest' is set
      if (autoOrientPostRequest === undefined || autoOrientPostRequest === null) {
        throw new Error("Missing the required parameter 'autoOrientPostRequest' when calling autoSupportPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/auto-support/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportPost operation.
     * @callback module:api/DefaultApi~exportPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExportPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export current scene as a STL
     * @param {String} outputPath The path to the output file where the .STL will be saved
     * @param {module:api/DefaultApi~exportPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExportPost200Response}
     */
    exportPost(outputPath, callback) {
      let postBody = null;
      // verify the required parameter 'outputPath' is set
      if (outputPath === undefined || outputPath === null) {
        throw new Error("Missing the required parameter 'outputPath' when calling exportPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'outputPath': outputPath
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExportPost200Response;
      return this.apiClient.callApi(
        '/export/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loadFormPost operation.
     * @callback module:api/DefaultApi~loadFormPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Load a file into the current scene
     * @param {module:model/LoadFormPostRequest} loadFormPostRequest Full path to the file to load
     * @param {module:api/DefaultApi~loadFormPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    loadFormPost(loadFormPostRequest, callback) {
      let postBody = loadFormPostRequest;
      // verify the required parameter 'loadFormPostRequest' is set
      if (loadFormPostRequest === undefined || loadFormPostRequest === null) {
        throw new Error("Missing the required parameter 'loadFormPostRequest' when calling loadFormPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/load-form/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelsIdDelete operation.
     * @callback module:api/DefaultApi~modelsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a model into the current scene
     * @param {String} id The unique identifier of the model
     * @param {module:api/DefaultApi~modelsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    modelsIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling modelsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/models/{id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sceneAutoPackPost operation.
     * @callback module:api/DefaultApi~sceneAutoPackPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run auto pack operation
     * @param {module:model/SceneAutoPackPostRequest} sceneAutoPackPostRequest 
     * @param {module:api/DefaultApi~sceneAutoPackPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sceneAutoPackPost(sceneAutoPackPostRequest, callback) {
      let postBody = sceneAutoPackPostRequest;
      // verify the required parameter 'sceneAutoPackPostRequest' is set
      if (sceneAutoPackPostRequest === undefined || sceneAutoPackPostRequest === null) {
        throw new Error("Missing the required parameter 'sceneAutoPackPostRequest' when calling sceneAutoPackPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/scene/auto-pack/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sceneGet operation.
     * @callback module:api/DefaultApi~sceneGetCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~sceneGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    sceneGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/scene', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sceneImportModelPost operation.
     * @callback module:api/DefaultApi~sceneImportModelPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SceneImportModelPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Load a model into the current scene
     * @param {module:model/SceneImportModelPostRequest} sceneImportModelPostRequest 
     * @param {module:api/DefaultApi~sceneImportModelPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SceneImportModelPost200Response}
     */
    sceneImportModelPost(sceneImportModelPostRequest, callback) {
      let postBody = sceneImportModelPostRequest;
      // verify the required parameter 'sceneImportModelPostRequest' is set
      if (sceneImportModelPostRequest === undefined || sceneImportModelPostRequest === null) {
        throw new Error("Missing the required parameter 'sceneImportModelPostRequest' when calling sceneImportModelPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SceneImportModelPost200Response;
      return this.apiClient.callApi(
        '/scene/import-model/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sceneModelsIdReplacePost operation.
     * @callback module:api/DefaultApi~sceneModelsIdReplacePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SceneModelsIdReplacePost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace a model currently in the scene with a new model, copying the existing models setup
     * @param {String} id The unique identifier of the model
     * @param {module:model/SceneModelsIdReplacePostRequest} sceneModelsIdReplacePostRequest 
     * @param {module:api/DefaultApi~sceneModelsIdReplacePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SceneModelsIdReplacePost200Response}
     */
    sceneModelsIdReplacePost(id, sceneModelsIdReplacePostRequest, callback) {
      let postBody = sceneModelsIdReplacePostRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sceneModelsIdReplacePost");
      }
      // verify the required parameter 'sceneModelsIdReplacePostRequest' is set
      if (sceneModelsIdReplacePostRequest === undefined || sceneModelsIdReplacePostRequest === null) {
        throw new Error("Missing the required parameter 'sceneModelsIdReplacePostRequest' when calling sceneModelsIdReplacePost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SceneModelsIdReplacePost200Response;
      return this.apiClient.callApi(
        '/scene/models/{id}/replace/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scenePost operation.
     * @callback module:api/DefaultApi~scenePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new scene
     * @param {module:model/ScenePostRequest} scenePostRequest Machine type and material type selection
     * @param {module:api/DefaultApi~scenePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scenePost(scenePostRequest, callback) {
      let postBody = scenePostRequest;
      // verify the required parameter 'scenePostRequest' is set
      if (scenePostRequest === undefined || scenePostRequest === null) {
        throw new Error("Missing the required parameter 'scenePostRequest' when calling scenePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/scene', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sceneSaveFormPost operation.
     * @callback module:api/DefaultApi~sceneSaveFormPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save the current scene to a .FORM file
     * @param {module:model/LoadFormPostRequest} loadFormPostRequest Full path where the file should be saved
     * @param {module:api/DefaultApi~sceneSaveFormPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sceneSaveFormPost(loadFormPostRequest, callback) {
      let postBody = loadFormPostRequest;
      // verify the required parameter 'loadFormPostRequest' is set
      if (loadFormPostRequest === undefined || loadFormPostRequest === null) {
        throw new Error("Missing the required parameter 'loadFormPostRequest' when calling sceneSaveFormPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/scene/save-form/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sceneSaveScreenshotPost operation.
     * @callback module:api/DefaultApi~sceneSaveScreenshotPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save a .png screenshot of the current scene
     * @param {module:model/SceneSaveScreenshotPostRequest} sceneSaveScreenshotPostRequest 
     * @param {module:api/DefaultApi~sceneSaveScreenshotPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sceneSaveScreenshotPost(sceneSaveScreenshotPostRequest, callback) {
      let postBody = sceneSaveScreenshotPostRequest;
      // verify the required parameter 'sceneSaveScreenshotPostRequest' is set
      if (sceneSaveScreenshotPostRequest === undefined || sceneSaveScreenshotPostRequest === null) {
        throw new Error("Missing the required parameter 'sceneSaveScreenshotPostRequest' when calling sceneSaveScreenshotPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/scene/save-screenshot/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1PrintPost operation.
     * @callback module:api/DefaultApi~v1PrintPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1PrintPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send the current scene to the printer
     * @param {String} printer 
     * @param {String} jobName 
     * @param {module:api/DefaultApi~v1PrintPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1PrintPost200Response}
     */
    v1PrintPost(printer, jobName, callback) {
      let postBody = null;
      // verify the required parameter 'printer' is set
      if (printer === undefined || printer === null) {
        throw new Error("Missing the required parameter 'printer' when calling v1PrintPost");
      }
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling v1PrintPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'printer': printer,
        'job_name': jobName
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = V1PrintPost200Response;
      return this.apiClient.callApi(
        '/v1/print/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1SlicePost operation.
     * @callback module:api/DefaultApi~v1SlicePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Slice the current scene
     * @param {String} file 
     * @param {String} jobName 
     * @param {module:api/DefaultApi~v1SlicePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v1SlicePost(file, jobName, callback) {
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling v1SlicePost");
      }
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling v1SlicePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file,
        'job_name': jobName
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/slice/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
